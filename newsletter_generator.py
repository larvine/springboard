#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Jekyll Newsletter Post Generator
Jekyll Î∏îÎ°úÍ∑∏Ïö© Îâ¥Ïä§Î†àÌÑ∞ Ìè¨Ïä§Ìä∏Î•º ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÌïòÎäî ÎèÑÍµ¨
"""

import os
import yaml
import json
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
import re


class NewsletterGenerator:
    """Îâ¥Ïä§Î†àÌÑ∞ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self, config_path: str = "newsletter_config.yaml"):
        """
        Ï¥àÍ∏∞Ìôî
        
        Args:
            config_path: ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú
        """
        self.config_path = config_path
        self.config = self.load_config()
        self.templates_dir = Path(self.config.get('templates_dir', 'templates'))
        self.posts_dir = Path(self.config.get('posts_dir', '_posts'))
        self.images_dir = Path(self.config.get('images_dir', 'assets/images'))
        
    def load_config(self) -> Dict[str, Any]:
        """ÏÑ§Ï†ï ÌååÏùº Î°úÎìú"""
        if not os.path.exists(self.config_path):
            print(f"‚ö†Ô∏è  ÏÑ§Ï†ï ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {self.config_path}")
            print("Í∏∞Î≥∏ ÏÑ§Ï†ïÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.")
            return {}
        
        with open(self.config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def load_template(self, template_name: str) -> str:
        """ÌÖúÌîåÎ¶ø ÌååÏùº Î°úÎìú"""
        template_path = self.templates_dir / template_name
        if not template_path.exists():
            raise FileNotFoundError(f"ÌÖúÌîåÎ¶ø ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {template_path}")
        
        with open(template_path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def get_candidate_posts(self, days: int = 30) -> List[Dict[str, Any]]:
        """
        ÏµúÍ∑º Ìè¨Ïä§ÌåÖÏùÑ ÌõÑÎ≥¥Î°ú Ï∂îÎ†§ÏÑú Î∞òÌôò
        
        Args:
            days: ÏµúÍ∑º Î©∞Ïπ† Ïù¥ÎÇ¥Ïùò Ìè¨Ïä§Ìä∏Î•º Í∞ÄÏ†∏Ïò¨ÏßÄ
            
        Returns:
            Ìè¨Ïä§Ìä∏ Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏
        """
        candidates = []
        
        # posts_dirÏù¥ ÏóÜÏúºÎ©¥ Îπà Î¶¨Ïä§Ìä∏ Î∞òÌôò
        if not self.posts_dir.exists():
            print(f"‚ö†Ô∏è  Ìè¨Ïä§Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {self.posts_dir}")
            return candidates
        
        # Î™®Îì† ÎßàÌÅ¨Îã§Ïö¥ ÌååÏùº Í≤ÄÏÉâ
        for post_file in sorted(self.posts_dir.glob('*.md'), reverse=True):
            try:
                with open(post_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Front matter ÌååÏã±
                if content.startswith('---'):
                    parts = content.split('---', 2)
                    if len(parts) >= 3:
                        front_matter = yaml.safe_load(parts[1])
                        
                        # ÎÇ†Ïßú Ï≤¥ÌÅ¨
                        post_date = front_matter.get('date')
                        if post_date:
                            if isinstance(post_date, str):
                                post_date = datetime.strptime(post_date.split()[0], '%Y-%m-%d')
                            
                            days_diff = (datetime.now() - post_date).days
                            if days_diff <= days:
                                candidates.append({
                                    'file': post_file.name,
                                    'title': front_matter.get('title', 'Ï†úÎ™© ÏóÜÏùå'),
                                    'date': post_date.strftime('%Y-%m-%d'),
                                    'description': front_matter.get('description', ''),
                                    'image': front_matter.get('image', ''),
                                    'url': front_matter.get('url', ''),
                                })
            except Exception as e:
                print(f"‚ö†Ô∏è  ÌååÏùº ÏùΩÍ∏∞ Ïò§Î•ò ({post_file.name}): {e}")
                continue
        
        return candidates
    
    def show_candidates(self, candidates: List[Dict[str, Any]]):
        """ÌõÑÎ≥¥ Ìè¨Ïä§Ìä∏ Î™©Î°ù Ï∂úÎ†•"""
        if not candidates:
            print("\nüì≠ ÏµúÍ∑º Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.")
            return
        
        print("\nüìö Îâ¥Ïä§Î†àÌÑ∞ ÌõÑÎ≥¥ Ìè¨Ïä§Ìä∏:")
        print("=" * 80)
        for i, post in enumerate(candidates, 1):
            print(f"\n[{i}] {post['title']}")
            print(f"    ÎÇ†Ïßú: {post['date']}")
            if post.get('description'):
                print(f"    ÏÑ§Î™Ö: {post['description'][:60]}...")
            if post.get('image'):
                print(f"    Ïù¥ÎØ∏ÏßÄ: {post['image']}")
        print("\n" + "=" * 80)
    
    def generate_wide_section(self, item: Dict[str, Any]) -> str:
        """
        Wide section HTML ÏÉùÏÑ±
        
        Args:
            item: Ìè¨Ïä§Ìä∏ Ï†ïÎ≥¥ (title, image, url, description Îì±)
            
        Returns:
            ÏÉùÏÑ±Îêú HTML Î¨∏ÏûêÏó¥
        """
        template = self.load_template('wide_section.html')
        
        return template.format(
            title=item.get('title', ''),
            image=item.get('image', ''),
            url=item.get('url', ''),
            description=item.get('description', '')
        )
    
    def generate_grid_section(self, items: List[Dict[str, Any]]) -> str:
        """
        Grid section HTML ÏÉùÏÑ±
        
        Args:
            items: Ìè¨Ïä§Ìä∏ Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏
            
        Returns:
            ÏÉùÏÑ±Îêú HTML Î¨∏ÏûêÏó¥
        """
        template = self.load_template('grid_section.html')
        grid_item_template = self.load_template('grid_item.html')
        
        # Í∞Å ÏïÑÏù¥ÌÖúÏóê ÎåÄÌïú HTML ÏÉùÏÑ±
        grid_items_html = []
        for item in items:
            item_html = grid_item_template.format(
                title=item.get('title', ''),
                image=item.get('image', ''),
                url=item.get('url', ''),
                description=item.get('description', '')
            )
            grid_items_html.append(item_html)
        
        # Ï†ÑÏ≤¥ grid section ÏÉùÏÑ±
        return template.format(items='\n'.join(grid_items_html))
    
    def generate_newsletter_post(
        self,
        title: str,
        wide_items: List[Dict[str, Any]],
        grid_items: List[Dict[str, Any]],
        date: str = None,
        **kwargs
    ) -> str:
        """
        Îâ¥Ïä§Î†àÌÑ∞ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±
        
        Args:
            title: Îâ¥Ïä§Î†àÌÑ∞ Ï†úÎ™©
            wide_items: Wide sectionÏóê Îì§Ïñ¥Í∞à ÏïÑÏù¥ÌÖúÎì§
            grid_items: Grid sectionÏóê Îì§Ïñ¥Í∞à ÏïÑÏù¥ÌÖúÎì§
            date: Ìè¨Ïä§Ìä∏ ÎÇ†Ïßú (YYYY-MM-DD), NoneÏù¥Î©¥ Ïò§Îäò ÎÇ†Ïßú
            **kwargs: Ï∂îÍ∞Ä front matter ÌïÑÎìú
            
        Returns:
            ÏÉùÏÑ±Îêú ÎßàÌÅ¨Îã§Ïö¥ Ìè¨Ïä§Ìä∏ ÎÇ¥Ïö©
        """
        # ÎÇ†Ïßú ÏÑ§Ï†ï
        if date is None:
            date = datetime.now().strftime('%Y-%m-%d')
        
        # Front matter ÏÉùÏÑ±
        front_matter = {
            'layout': kwargs.get('layout', 'post'),
            'title': title,
            'date': f"{date} {datetime.now().strftime('%H:%M:%S')} +0900",
            'categories': kwargs.get('categories', ['newsletter']),
            'tags': kwargs.get('tags', []),
        }
        
        # Ï∂îÍ∞Ä ÌïÑÎìú
        for key, value in kwargs.items():
            if key not in front_matter:
                front_matter[key] = value
        
        # Wide sections ÏÉùÏÑ±
        wide_sections_html = []
        for item in wide_items:
            wide_sections_html.append(self.generate_wide_section(item))
        
        # Grid section ÏÉùÏÑ±
        grid_section_html = ""
        if grid_items:
            grid_section_html = self.generate_grid_section(grid_items)
        
        # Ìè¨Ïä§Ìä∏ ÌÖúÌîåÎ¶ø Î°úÎìú
        post_template = self.load_template('post_template.md')
        
        # ÏµúÏ¢Ö Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±
        post_content = post_template.format(
            front_matter=yaml.dump(front_matter, allow_unicode=True, sort_keys=False),
            wide_sections='\n\n'.join(wide_sections_html),
            grid_section=grid_section_html
        )
        
        return post_content
    
    def save_newsletter_post(self, content: str, filename: str = None) -> Path:
        """
        Îâ¥Ïä§Î†àÌÑ∞ Ìè¨Ïä§Ìä∏ Ï†ÄÏû•
        
        Args:
            content: Ìè¨Ïä§Ìä∏ ÎÇ¥Ïö©
            filename: ÌååÏùºÎ™Ö (ÏóÜÏúºÎ©¥ ÏûêÎèô ÏÉùÏÑ±)
            
        Returns:
            Ï†ÄÏû•Îêú ÌååÏùº Í≤ΩÎ°ú
        """
        # ÌååÏùºÎ™Ö ÏÉùÏÑ±
        if filename is None:
            date_str = datetime.now().strftime('%Y-%m-%d')
            filename = f"{date_str}-newsletter.md"
        
        # ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        self.posts_dir.mkdir(parents=True, exist_ok=True)
        
        # ÌååÏùº Ï†ÄÏû•
        file_path = self.posts_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return file_path
    
    def interactive_generate(self):
        """ÎåÄÌôîÌòïÏúºÎ°ú Îâ¥Ïä§Î†àÌÑ∞ ÏÉùÏÑ±"""
        print("=" * 80)
        print("üéØ Jekyll Îâ¥Ïä§Î†àÌÑ∞ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±Í∏∞")
        print("=" * 80)
        
        # 1. ÌõÑÎ≥¥ Ìè¨Ïä§Ìä∏ Î°úÎìú
        days = self.config.get('candidate_days', 30)
        candidates = self.get_candidate_posts(days)
        self.show_candidates(candidates)
        
        # 2. Îâ¥Ïä§Î†àÌÑ∞ Ï†úÎ™© ÏûÖÎ†•
        print("\nüìù Îâ¥Ïä§Î†àÌÑ∞ Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:")
        title = input("> ").strip()
        if not title:
            title = f"Weekly Newsletter - {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº')}"
        
        # 3. Wide section ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù
        print("\nüé® Wide SectionÏóê Îì§Ïñ¥Í∞à Ìè¨Ïä§Ìä∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:")
        print("   (Î≤àÌò∏Î•º ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌïòÏó¨ ÏûÖÎ†•, Ïòà: 1,3,5 ÎòêÎäî ÏóîÌÑ∞Î°ú Í±¥ÎÑàÎõ∞Í∏∞)")
        wide_input = input("> ").strip()
        
        wide_items = []
        if wide_input:
            try:
                indices = [int(i.strip()) - 1 for i in wide_input.split(',')]
                wide_items = [candidates[i] for i in indices if 0 <= i < len(candidates)]
            except (ValueError, IndexError):
                print("‚ö†Ô∏è  ÏûòÎ™ªÎêú ÏûÖÎ†•ÏûÖÎãàÎã§. Wide sectionÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.")
        
        # 4. Grid section ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù
        print("\nüìä Grid SectionÏóê Îì§Ïñ¥Í∞à Ìè¨Ïä§Ìä∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:")
        print("   (Î≤àÌò∏Î•º ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌïòÏó¨ ÏûÖÎ†•, Ïòà: 2,4,6 ÎòêÎäî ÏóîÌÑ∞Î°ú Í±¥ÎÑàÎõ∞Í∏∞)")
        grid_input = input("> ").strip()
        
        grid_items = []
        if grid_input:
            try:
                indices = [int(i.strip()) - 1 for i in grid_input.split(',')]
                grid_items = [candidates[i] for i in indices if 0 <= i < len(candidates)]
            except (ValueError, IndexError):
                print("‚ö†Ô∏è  ÏûòÎ™ªÎêú ÏûÖÎ†•ÏûÖÎãàÎã§. Grid sectionÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.")
        
        # 5. Îâ¥Ïä§Î†àÌÑ∞ ÏÉùÏÑ±
        if not wide_items and not grid_items:
            print("\n‚ö†Ô∏è  ÏÑ†ÌÉùÎêú Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§. Îâ¥Ïä§Î†àÌÑ∞Î•º ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
            return
        
        print("\n‚öôÔ∏è  Îâ¥Ïä§Î†àÌÑ∞Î•º ÏÉùÏÑ±ÌïòÎäî Ï§ë...")
        content = self.generate_newsletter_post(
            title=title,
            wide_items=wide_items,
            grid_items=grid_items
        )
        
        # 6. ÌååÏùº Ï†ÄÏû•
        file_path = self.save_newsletter_post(content)
        
        print(f"\n‚úÖ Îâ¥Ïä§Î†àÌÑ∞Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        print(f"   üìÑ ÌååÏùº: {file_path}")
        print(f"   üìù Ï†úÎ™©: {title}")
        print(f"   üé® Wide items: {len(wide_items)}Í∞ú")
        print(f"   üìä Grid items: {len(grid_items)}Í∞ú")
        print("\n" + "=" * 80)
    
    def batch_generate(self, items_data: Dict[str, Any]) -> Path:
        """
        Î∞∞Ïπò Î™®ÎìúÎ°ú Îâ¥Ïä§Î†àÌÑ∞ ÏÉùÏÑ±
        
        Args:
            items_data: Îâ¥Ïä§Î†àÌÑ∞ Îç∞Ïù¥ÌÑ∞ (JSON ÌòïÏãù)
                {
                    "title": "Îâ¥Ïä§Î†àÌÑ∞ Ï†úÎ™©",
                    "wide_items": [...],
                    "grid_items": [...],
                    "date": "2025-10-21"  # optional
                }
        
        Returns:
            Ï†ÄÏû•Îêú ÌååÏùº Í≤ΩÎ°ú
        """
        title = items_data.get('title', f"Newsletter - {datetime.now().strftime('%Y-%m-%d')}")
        wide_items = items_data.get('wide_items', [])
        grid_items = items_data.get('grid_items', [])
        date = items_data.get('date')
        
        content = self.generate_newsletter_post(
            title=title,
            wide_items=wide_items,
            grid_items=grid_items,
            date=date
        )
        
        filename = items_data.get('filename')
        file_path = self.save_newsletter_post(content, filename)
        
        return file_path


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Jekyll Î∏îÎ°úÍ∑∏Ïö© Îâ¥Ïä§Î†àÌÑ∞ Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±Í∏∞'
    )
    parser.add_argument(
        '--config',
        default='newsletter_config.yaml',
        help='ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú (Í∏∞Î≥∏Í∞í: newsletter_config.yaml)'
    )
    parser.add_argument(
        '--batch',
        help='Î∞∞Ïπò Î™®ÎìúÎ°ú Ïã§Ìñâ (JSON ÌååÏùº Í≤ΩÎ°ú)'
    )
    parser.add_argument(
        '--candidates',
        action='store_true',
        help='ÌõÑÎ≥¥ Ìè¨Ïä§Ìä∏Îßå ÌëúÏãúÌïòÍ≥† Ï¢ÖÎ£å'
    )
    
    args = parser.parse_args()
    
    # ÏÉùÏÑ±Í∏∞ Ï¥àÍ∏∞Ìôî
    generator = NewsletterGenerator(args.config)
    
    # ÌõÑÎ≥¥ ÌëúÏãúÎßå
    if args.candidates:
        candidates = generator.get_candidate_posts()
        generator.show_candidates(candidates)
        
        # JSONÏúºÎ°úÎèÑ Ï∂úÎ†•
        print("\nüìã JSON ÌòïÏãù:")
        print(json.dumps(candidates, ensure_ascii=False, indent=2))
        return
    
    # Î∞∞Ïπò Î™®Îìú
    if args.batch:
        with open(args.batch, 'r', encoding='utf-8') as f:
            items_data = json.load(f)
        
        file_path = generator.batch_generate(items_data)
        print(f"‚úÖ Îâ¥Ïä§Î†àÌÑ∞Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: {file_path}")
        return
    
    # ÎåÄÌôîÌòï Î™®Îìú
    generator.interactive_generate()


if __name__ == '__main__':
    main()
